using System.Collections.Generic;
using NUnit.Framework;
using TestsGeneratorCore;

namespace TestsGeneratorTests;

class TestsGeneratorTests
{
    private readonly List<TestInfo> _tests;
    public TestsGeneratorTests()
    {
        var testsGenerator = new TestsGenerator();
        _tests = testsGenerator.Generate(Program);
    }
    

    [Test]
    public void CountOfTestClasses()
    {
        var actual = _tests.Count;
        var excepted = 2;
        Assert.That(actual, Is.EqualTo(excepted));
    }
    
    [Test]
    public void ContainsPublicMethods()
    {
        var actual = _tests[0].Source.Contains("SubTest()")
                     && _tests[0].Source.Contains("AddTest()");
        
        Assert.That(actual, Is.True);
    }
    
    [Test]
    public void NotContainsPrivateMethods()
    {
        var actual = _tests[0].Source.Contains("PrivateMethod()");

        Assert.That(actual, Is.False);
    }
    
    [Test]
    public void CorrectSetUp()
    {
        var code = _tests[0].Source;
        var actual = code.Contains("_a = new Mock<IEnumerable<int>>();")
                     && code.Contains("int b = default")
                     && code.Contains("_program = new Program(_a.Object, b)");
        
        Assert.That(actual, Is.True);
    }
    
    [Test]
    public void CorrectGlobalVariables()
    {
        var code = _tests[0].Source;
        var actual = code.Contains("private Mock<IEnumerable<int>> _a;")
                     && code.Contains("private Program _program");
        
        Assert.That(actual, Is.True);
    }
    
    [Test]
    public void CorrectArrangeSection()
    {
        var code = _tests[0].Source;
        var actual = code.Contains("int a = default")
                     && code.Contains("string b = default");
        
        Assert.That(actual, Is.True);
    }
    
    [Test]
    public void CorrectActSection()
    {
        var code = _tests[0].Source;
        var actual = code.Contains("var actual = _program.Add(a, b);")
                     && code.Contains("_program.Sub(a, b);")
                     && !code.Contains("var actual = _program.Sub(a, b)");
        
        Assert.That(actual, Is.True);
    }
    
    [Test]
    public void CorrectAssertSection()
    {
        var code = _tests[0].Source;
        var actual = code.Contains("Assert.That(actual, Is.EqualTo(expected));")
                     && code.Contains("Assert.Fail(\"autogenerated\");");
        
        Assert.That(actual, Is.True);
    }
    
    private const string Program = @"
        using System;
        
        namespace Example
        {
            public class Program
            {
	            public Program(IEnumerable<int> a, int b) { }

                public void Sub(int a, string b)
                {
                    var c = a - b;
                }

                public int Add(int a, int b)
                {
                    return a + b;
                }

                private void PrivateMethod() { }
            }

            public class SecondClass { }

            internal class InternalClass { }
        }";
}